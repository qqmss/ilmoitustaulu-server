{"version":3,"sources":["services/events.js","services/comments.js","components/Comments.js","components/EventTable.js","components/EventForm.js","App.js","index.js"],"names":["baseUrl","getAll","axios","get","then","response","data","forEach","event","time","Date","createdTime","create","post","update","id","put","erase","delete","eventId","comment","SaveComment","commentId","Comment","handleDeleteCommentClick","className","author","toLocaleString","onClick","message","CommentForm","handleCommentSubmit","newAuthor","setNewAuthor","newMessage","setNewMessage","commentFormEventId","onSubmit","value","onChange","target","type","Comments","comments","setCommentFormEventId","map","key","Events","events","handleShowEventClick","handleJoinEventClick","handleDeleteEventClick","eventsToShowDetails","Event","includes","name","location","toLocaleDateString","EventDetails","colSpan","description","participants","filter","EventTable","setEventsToShowDetails","EventForm","handleEventSubmit","newName","setNewName","newLocation","setNewLocation","newTime","setNewTime","newDescription","setNewDescription","ErrorNotification","setErrorMessage","SuccessNotification","setSuccessMessage","App","useState","setEvents","setComments","errorMessage","successMessage","useEffect","eventService","idShow","concat","some","commentService","idJoin","find","window","setTimeout","catch","error","console","log","status","idDelete","preventDefault","newComment","newEvent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b49ab6b.chunk.js","sourcesContent":["/**\r\n * events module. Tapahtumiin liittyvät pyynnöt.\r\n * @module services/events\r\n */\r\n\r\nimport axios from 'axios'\r\n\r\nconst baseUrl = '/api/events'\r\n\r\n/**\r\n * Hae kaikki tapahtumat.\r\n * @returns {Promise<Object[]>} Lista rest apista haetuista tapahtuma olioista\r\n */\r\nconst getAll = () => {\r\n  return axios\r\n    .get(baseUrl)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      data.forEach(event => {\r\n        event.time = new Date(event.time)\r\n        event.createdTime = new Date(event.createdTime)\r\n      })\r\n      return data\r\n    })\r\n}\r\n\r\n/**\r\n * Lähetä tapahtuma.\r\n * @param {object} event - Tapahtuma lähetettäväksi palvelimelle rest rajapinnan avulla.\r\n * @param {number} event.participants - Tapahtuman oasllistuja määrä.\r\n * @param {string} event.name - Tapahtuman nimi.\r\n * @param {string} event.location - Tapahtuman paikka.\r\n * @param {Date} event.time - Tapahtuman aika.\r\n * @param {string} event.description - Tapahtuman kuvaus.\r\n * @returns {Promise<Object>} Lisätty tapahtuma oliona.\r\n */\r\nconst create = (event) => {\r\n  return axios\r\n    .post(baseUrl, event)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      if (data) {\r\n        data.time = new Date(data.time)\r\n        data.createdTime = new Date(data.createdTime)\r\n      }\r\n      return data\r\n    })\r\n}\r\n\r\n/**\r\n * Lähetä pyyntö tapahtuman päivittämiseksi\r\n * @param {string} id - rest rajapinnassa olevan tapahtuman id\r\n * @param {object} event - tapahtuma olio jolla halutaan korvata tietoja.\r\n * @returns {Promise<Object>} Päivitetty tapahtuma olio.\r\n */\r\nconst update = (id, event) => {\r\n  return axios\r\n    .put(`${baseUrl}/${id}`, event)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      data.time = new Date(data.time)\r\n      data.createdTime = new Date(data.createdTime)\r\n      return data\r\n    })\r\n}\r\n\r\n/**\r\n * Poista tapahtuma id:n perusteella\r\n * @param {string} id - poistettavan tapahtuman id.\r\n */\r\nconst erase = (id) => axios.delete(`${baseUrl}/${id}`)\r\n\r\nexport default { getAll, create, update, erase }","/**\r\n * comments module. Kommentteihin liittyvät pyynnöt.\r\n * @module services/comments\r\n */\r\n\r\nimport axios from 'axios'\r\n\r\nconst baseUrl = '/api/events'\r\n\r\n/**\r\n * Hae kaikki tapahtuman kommentit.\r\n * @param {string} eventId - Tapahtuman id jonka kaikki kommentit haetaan.\r\n * @returns {Promise<Object[]>} Lista rest apista haetuista tapahtuman kommetti olioista.\r\n */\r\nconst getAll = (eventId) => {\r\n  return axios\r\n    .get(`${baseUrl}/${eventId}/comments`)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      data.forEach(comment => {\r\n        comment.createdTime = new Date(comment.createdTime)\r\n        comment.eventId = eventId\r\n      })\r\n      return data\r\n    })\r\n}\r\n\r\n/**\r\n * Lähetä kommetti.\r\n * @param {string} eventId Tapahtuman id johon kommentti viittaa.\r\n * @param {object} comment - Kommentti olio.\r\n * @param {string} comment.author - Kommentin nimimerkki.\r\n * @param {string} comment.message - Kommentin viesti.\r\n * @returns {Promise<Object>} Lisätty kommentti oliona.\r\n */\r\nconst create = (eventId, comment) => {\r\n  return axios\r\n    .post(`${baseUrl}/${eventId}/comments`, comment)\r\n    .then(response => response.data)\r\n    .then(SaveComment => {\r\n      SaveComment.createdTime = new Date(SaveComment.createdTime)\r\n      SaveComment.eventId = eventId\r\n      return SaveComment\r\n    })\r\n}\r\n\r\n/**\r\n * Poista kommentti\r\n * @param {string} eventId - Poistettavan kommentin tapahtuman id.\r\n * @param {string} commentId - Poistettavan kommentin id.\r\n */\r\nconst erase = (eventId, commentId) => {\r\n  return axios\r\n    .delete(`${baseUrl}/${eventId}/comments/${commentId}`)\r\n}\r\n\r\nexport default { getAll, create, erase }","/**\r\n * Comments module. Kommentointi ja kommentit.\r\n * @module components/Comments\r\n * @type {JSX.Element}\r\n */\r\n\r\nimport React from 'react'\r\n\r\n/**\r\n * Kommentit komponentti\r\n * @param {object[]} comments - Kommentti oliot.\r\n * @param {string} comments[].author - Kommentin nimimerkki.\r\n * @param {string} comments[].message - Kommentin viesti\r\n * @param {Date} comments[].createdTime - Kommentin luonti aika.\r\n * @param {string} comments.id - Kommentin id.\r\n * @param {string} eventId - Liittyvän tapahtuman id.\r\n * @param {function(string)} setCommentFormEventId - Asettaa tapahtumaa jota kommentoidaan liittyvän id tapahtuma id:n.\r\n * @param {string} commentFormEventId - Kommentoitavan tapahtuman id.\r\n * @param {function(string)} handleCommentSubmit - Kommentti lomakkeen lähetyksen tapahtuman käsittelijä.\r\n * @param {string} newAuthor - Kommentin lomakkeessa oleva nimimerkki.\r\n * @param {function(string)} setNewAuthor - Asettaa kommentin lomakkeen nimimerkin sen muuttuessa.\r\n * @param {string} newMessage - Kommentti lomakkeessa oleva viesti.\r\n * @param {function(string)} setNewMessage - Asettaa kommentin lomakkeen viestin sen lomakkeessa muuttuessa.\r\n * @param {function(string, string)} handleDeleteCommentClick - Poista kommentti sen sen id ja tapahtuman id avulla johon se on liitetty.\r\n * @returns {JSX.Element} Kommentit komponentti\r\n */\r\nconst Comments = ({ comments, eventId, setCommentFormEventId, commentFormEventId, handleCommentSubmit, newAuthor,\r\n  setNewAuthor, newMessage, setNewMessage, handleDeleteCommentClick }) => (\r\n    <div>\r\n      {comments.map(comment => <Comment key={comment.id} comment={comment} handleDeleteCommentClick={() => handleDeleteCommentClick(eventId, comment.id)} />)}\r\n      <button onClick={() => setCommentFormEventId(commentFormEventId !== eventId ? eventId : '')}>Lisää kommentti</button>\r\n      <CommentForm handleCommentSubmit={handleCommentSubmit} newAuthor={newAuthor} setNewAuthor={setNewAuthor}\r\n        newMessage={newMessage} setNewMessage={setNewMessage} commentFormEventId={commentFormEventId} eventId={eventId} />\r\n    </div>\r\n  )\r\n\r\n/**\r\n * Kommentti komponentti. Näytettävä kommentti.\r\n * @param {object} comment - Kommentti olio.\r\n * @param {string} comment.author - Kommentin nimimerkki.\r\n * @param {string} comment.message - Kommentin viesti\r\n * @param {Date} comment.createdTime - Kommentin luonti aika.\r\n * @param {string} comments.id - Kommentin id.\r\n * @param {function()} handleDeleteCommentClick - poistaa tämän komponentin kuvaaman kommentin.\r\n * @returns {JSX.Element} Kommentti komponentti.\r\n */\r\nconst Comment = ({ comment, handleDeleteCommentClick }) => (\r\n  <div className='comment'>\r\n    <div className='comment-author'><em>{comment.author} {comment.createdTime.toLocaleString()}</em>\r\n      <button className='delete-button' onClick={handleDeleteCommentClick}>Poista</button></div>\r\n    <p className='comment-mesage'>{comment.message}</p>\r\n  </div>\r\n)\r\n\r\n/**\r\n * Kommentointi lomake komponentti.\r\n * @param {function()} handleCommentSubmit - Kommentti lomakkeen lähetyksen tapahtuman käsittelijä.\r\n * @param {string} newAuthor - Kommentin lomakkeen nimimerkki.\r\n * @param {function(string)} setNewAuthor - Asettaa kommentin lomakkeen nimimerkin sen muuttuessa.\r\n * @param {string} newMessage - Kommentti lomakkeen viesti.\r\n * @param {function(string)} setNewMessage - Asettaa kommentin lomakkeen viestin sen muuttuessa. \r\n * @param {string} commentFormEventId - Kommentoitavan tapahtuman id.\r\n * @param {string} eventId - Liittyvän tapahtuman id.\r\n * @returns {JSX.Element} Kommentointi lomake komponentti.\r\n */\r\nconst CommentForm = ({ handleCommentSubmit, newAuthor, setNewAuthor, newMessage, setNewMessage, commentFormEventId, eventId }) => {\r\n  if (commentFormEventId === eventId) {\r\n    return (\r\n      <form onSubmit={handleCommentSubmit} className='comment-form'>\r\n        <fieldset>\r\n          <legend>Uusi kommentti</legend>\r\n          <label>\r\n            Nimi tai Nimimerkki:\r\n              <input value={newAuthor} onChange={event => setNewAuthor(event.target.value)} />\r\n          </label>\r\n          <label>\r\n            Viesti:\r\n              <textarea value={newMessage} onChange={event => setNewMessage(event.target.value)} />\r\n          </label>\r\n          <button type='submit'>Lähetä</button>\r\n        </fieldset>\r\n      </form>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default Comments","/**\r\n * EventTable module. EventTable ja sen komponentit.\r\n * @module components/EventTable\r\n * @type {JSX.Element}\r\n */\r\n\r\nimport React from 'react'\r\nimport Comments from './Comments'\r\n\r\n/**\r\n * Taulu tapahtumista komponentti.\r\n * @param {object[]} events - Tapahtuma oliot.\r\n * @param {number} events[].participants - Tapahtuman oasllistuja määrä.\r\n * @param {string} events[].name - Tapahtuman nimi.\r\n * @param {string} events[].location - Tapahtuman paikka.\r\n * @param {Date} events[].time - Tapahtuman aika.\r\n * @param {string} events[].description - Tapahtuman kuvaus.\r\n * @param {Date} events[].createdTime - Tapahtuman luonti aika.\r\n * @param {string} events[].id - Tapahtuman id.\r\n * @param {object[]} comments - Kommentti oliot.\r\n * @param {string} comments[].author - Kommenttin nimimerkki.\r\n * @param {string} comments[].message - Kommenttin viesti.\r\n * @param {Date} comments[].createdTime - Kommenttin luomisaika.\r\n * @param {string} comments[].id - Kommenttin id.\r\n * @param {function(string)} handleShowEventClick - Näyttää tapahtuman lisätiedot.\r\n * @param {function(string)} handleJoinEventClick - Lisää tapahtumalle osallistujan.\r\n * @param {function(string)} handleDeleteEventClick - Poistaa kommentin.\r\n * @param {string[]} eventsToShowDetails - Tapahtumien id:t joista näytetään lisätiedot.\r\n * @param {function(string[])} setEventsToShowDetails - Asettaa tapahtumien id:t joista näytetään lisätiedot.\r\n * @param {function(string)} setCommentFormEventId - Asettaa kommentoitavan tapahtuman tapahtuma id:n.\r\n * @param {string} commentFormEventId - Kommentoitavan tapahtuman tapahtuma id.\r\n * @param {function(object)} handleCommentSubmit - Kommentti lomakkeen lähetyksen tapahtuman käsittelijä.\r\n * @param {string} newAuthor - Kommentin lomakkeessa oleva nimimerkki.\r\n * @param {function(string)} setNewAuthor - Kommentin lomakkeessa oleva nimimerkki asettaja.\r\n * @param {string} newMessage - Kommentti lomakkeessa oleva viesti.\r\n * @param {function(string)} setNewMessage - Kommentti lomakkeessa oleva viestin asettaja.\r\n * @param {function(string, string)} handleDeleteCommentClick - Poista kommentti.\r\n * @returns {JSX.Element} Taulu tapahtumista komponentti.\r\n */\r\nconst EventTable = ({ events, comments, handleShowEventClick, handleJoinEventClick, handleDeleteEventClick, eventsToShowDetails,\r\n  setEventsToShowDetails, setCommentFormEventId, commentFormEventId, handleCommentSubmit, newAuthor, setNewAuthor, newMessage,\r\n  setNewMessage, handleDeleteCommentClick }) => (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>\r\n            <button className='show-all-event-details' onClick={() => setEventsToShowDetails(events.map(event => event.id))}>Näytä</button>\r\n            <button className='show-all-event-details' onClick={() => setEventsToShowDetails([])}>Piilota</button>\r\n            Tapahtuma</th>\r\n          <th>Paikka</th>\r\n          <th>Aika</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <Events events={events} comments={comments} handleShowEventClick={handleShowEventClick} handleJoinEventClick={handleJoinEventClick}\r\n          handleDeleteEventClick={handleDeleteEventClick} eventsToShowDetails={eventsToShowDetails} setCommentFormEventId={setCommentFormEventId}\r\n          commentFormEventId={commentFormEventId} handleCommentSubmit={handleCommentSubmit} newAuthor={newAuthor} setNewAuthor={setNewAuthor}\r\n          newMessage={newMessage} setNewMessage={setNewMessage} handleDeleteCommentClick={handleDeleteCommentClick} />\r\n      </tbody>\r\n    </table>\r\n  )\r\n\r\n/**\r\n * Tapahtumat komponentti.\r\n * @param {object[]} events - Tapahtuma oliot.\r\n * @param {number} events[].participants - Tapahtuman oasllistuja määrä.\r\n * @param {string} events[].name - Tapahtuman nimi.\r\n * @param {string} events[].location - Tapahtuman paikka.\r\n * @param {Date} events[].time - Tapahtuman aika.\r\n * @param {string} events[].description - Tapahtuman kuvaus.\r\n * @param {Date} events[].createdTime - Tapahtuman luonti aika.\r\n * @param {string} events[].id - Tapahtuman id.\r\n * @param {object[]} comments - Kommentti oliot.\r\n * @param {string} comments[].author - Kommenttin nimimerkki.\r\n * @param {string} comments[].message - Kommenttin viesti.\r\n * @param {Date} comments[].createdTime - Kommenttin luomisaika.\r\n * @param {string} comments[].id - Kommenttin id.\r\n * @param {function(string)} handleShowEventClick - Näyttää tapahtuman lisätiedot.\r\n * @param {function(string)} handleJoinEventClick - Lisää tapahtumalle osallistujan.\r\n * @param {function(string)} handleDeleteEventClick - Poistaa kommentin.\r\n * @param {string[]} eventsToShowDetails - Tapahtumien id:t joista näytetään lisätiedot.\r\n * @param {function(string)} setCommentFormEventId - Asettaa kommentoitavan tapahtuman tapahtuma id:n.\r\n * @param {string} commentFormEventId - Kommentoitavan tapahtuman tapahtuma id.\r\n * @param {function(object)} handleCommentSubmit - Kommentti lomakkeen lähetyksen tapahtuman käsittelijä.\r\n * @param {string} newAuthor - Kommentin lomakkeessa oleva nimimerkki.\r\n * @param {function(string)} setNewAuthor - Kommentin lomakkeessa oleva nimimerkki asettaja.\r\n * @param {string} newMessage - Kommentti lomakkeessa oleva viesti.\r\n * @param {function(string)} setNewMessage - Kommentti lomakkeessa oleva viestin asettaja.\r\n * @param {function(string, string)} handleDeleteCommentClick - Poista kommentti.\r\n * @returns {JSX.Element[]} Tapahtuma lista\r\n */\r\nconst Events = ({ events, comments, handleShowEventClick, handleJoinEventClick, handleDeleteEventClick, eventsToShowDetails, setCommentFormEventId,\r\n  commentFormEventId, handleCommentSubmit, newAuthor, setNewAuthor, newMessage, setNewMessage, handleDeleteCommentClick }) => (\r\n    events.map(event => <Event key={event.id} event={event} comments={comments} handleShowEventClick={() => handleShowEventClick(event.id)}\r\n      handleJoinEventClick={() => handleJoinEventClick(event.id)} handleDeleteEventClick={() => handleDeleteEventClick(event.id)}\r\n      eventsToShowDetails={eventsToShowDetails} setCommentFormEventId={setCommentFormEventId} commentFormEventId={commentFormEventId}\r\n      handleCommentSubmit={handleCommentSubmit} newAuthor={newAuthor} setNewAuthor={setNewAuthor} newMessage={newMessage} setNewMessage={setNewMessage}\r\n      handleDeleteCommentClick={handleDeleteCommentClick} />)\r\n  )\r\n\r\n/**\r\n * Tapahtuma komponentti. Tapahtuma lisätietoineen tai ilman riippuen listasta eventsToShowDetails.\r\n * @param {object} events - Tapahtuma olio.\r\n * @param {number} event.participants - Tapahtuman oasllistuja määrä.\r\n * @param {string} event.name - Tapahtuman nimi.\r\n * @param {string} event.location - Tapahtuman paikka.\r\n * @param {Date} event.time - Tapahtuman aika.\r\n * @param {string} event.description - Tapahtuman kuvaus.\r\n * @param {Date} event.createdTime - Tapahtuman luonti aika.\r\n * @param {string} events.id - Tapahtuman id.\r\n * @param {object} comments - Kommentti oliot.\r\n * @param {string} comments.author - Kommenttin nimimerkki.\r\n * @param {string} comments.message - Kommenttin viesti.\r\n * @param {Date} comments.createdTime - Kommenttin luomisaika.\r\n * @param {string} comments.id - Kommenttin id.\r\n * @param {function()} handleShowEventClick - Näyttää tapahtuman lisätiedot.\r\n * @param {function()} handleJoinEventClick - Lisää tapahtumalle osallistujan.\r\n * @param {function()} handleDeleteEventClick - Poistaa kommentin.\r\n * @param {string[]} eventsToShowDetails - Tapahtumien id:t joista näytetään lisätiedot.\r\n * @param {function(string)} setCommentFormEventId - Asettaa kommentoitavan tapahtuman tapahtuma id:n.\r\n * @param {string} commentFormEventId - Kommentoitavan tapahtuman tapahtuma id.\r\n * @param {function(object)} handleCommentSubmit - Kommentti lomakkeen lähetyksen tapahtuman käsittelijä.\r\n * @param {string} newAuthor - Kommentin lomakkeessa oleva nimimerkki.\r\n * @param {function(string)} setNewAuthor - Kommentin lomakkeessa oleva nimimerkki asettaja.\r\n * @param {string} newMessage - Kommentti lomakkeessa oleva viesti.\r\n * @param {function(string)} setNewMessage - Kommentti lomakkeessa oleva viestin asettaja.\r\n * @param {function(string, string)} handleDeleteCommentClick - Poista kommentti.\r\n * @returns {JSX.Element} Tapahtuma komponentti.\r\n */\r\nconst Event = ({ event, comments, handleShowEventClick, handleJoinEventClick, handleDeleteEventClick, eventsToShowDetails, setCommentFormEventId,\r\n  commentFormEventId, handleCommentSubmit, newAuthor, setNewAuthor, newMessage, setNewMessage, handleDeleteCommentClick }) => {\r\n  if (eventsToShowDetails.includes(event.id)) {\r\n    return (\r\n      <tr>\r\n        <EventDetails event={event} comments={comments} handleShowEventClick={handleShowEventClick} handleJoinEventClick={handleJoinEventClick}\r\n          handleDeleteEventClick={handleDeleteEventClick} setCommentFormEventId={setCommentFormEventId} commentFormEventId={commentFormEventId}\r\n          handleCommentSubmit={handleCommentSubmit} newAuthor={newAuthor} setNewAuthor={setNewAuthor} newMessage={newMessage} setNewMessage={setNewMessage}\r\n          handleDeleteCommentClick={handleDeleteCommentClick} />\r\n      </tr>\r\n    )\r\n  } else {\r\n    return (\r\n      <tr onClick={handleShowEventClick}>\r\n        <td>{event.name}</td>\r\n        <td>{event.location}</td>\r\n        <td>{event.time.toLocaleDateString()}</td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Tapahtuman lisätiedot komponentti.\r\n * @param {object} event - Tapahtuma oliot.\r\n * @param {number} event.participants - Tapahtuman oasllistuja määrä.\r\n * @param {string} event.name - Tapahtuman nimi.\r\n * @param {string} event.location - Tapahtuman paikka.\r\n * @param {Date} event.time - Tapahtuman aika.\r\n * @param {string} event.description - Tapahtuman kuvaus.\r\n * @param {Date} event.createdTime - Tapahtuman luonti aika.\r\n * @param {string} event.id - Tapahtuman id.\r\n * @param {object} comments - Kommentti oliot.\r\n * @param {string} comments.author - Kommenttin nimimerkki.\r\n * @param {string} comments.message - Kommenttin viesti.\r\n * @param {Date} comments.createdTime - Kommenttin luomisaika.\r\n * @param {string} comments.id - Kommenttin id.\r\n * @param {function()} handleShowEventClick - Näyttää tapahtuman lisätiedot.\r\n * @param {function()} handleJoinEventClick - Lisää tapahtumalle osallistujan.\r\n * @param {function()} handleDeleteEventClick - Poistaa kommentin.\r\n * @param {function(string)} setCommentFormEventId - Asettaa kommentoitavan tapahtuman tapahtuma id:n.\r\n * @param {string} commentFormEventId - Kommentoitavan tapahtuman tapahtuma id.\r\n * @param {function(object)} handleCommentSubmit - Kommentti lomakkeen lähetyksen tapahtuman käsittelijä.\r\n * @param {string} newAuthor - Kommentin lomakkeessa oleva nimimerkki.\r\n * @param {function(string)} setNewAuthor - Kommentin lomakkeessa oleva nimimerkki asettaja.\r\n * @param {string} newMessage - Kommentti lomakkeessa oleva viesti.\r\n * @param {function(string)} setNewMessage - Kommentti lomakkeessa oleva viestin asettaja.\r\n * @param {function(string, string)} handleDeleteCommentClick - Poista kommentti.\r\n * @returns {JSX.Element} Tapahtuman lisätiedot komponentti.\r\n */\r\nconst EventDetails = ({ event, comments, handleShowEventClick, handleJoinEventClick, handleDeleteEventClick, setCommentFormEventId,\r\n  commentFormEventId, handleCommentSubmit, newAuthor, setNewAuthor, newMessage, setNewMessage, handleDeleteCommentClick }) => (\r\n    <td colSpan=\"3\">\r\n      <h2 className='details-header' onClick={handleShowEventClick}>{event.name}</h2>\r\n      <div className='created-time'>Luotu: {event.createdTime.toLocaleString()}<br />\r\n        <button className='delete-button' onClick={handleDeleteEventClick} >Poista</button></div>\r\n      <h3>Paikka</h3>\r\n      <p>{event.location}</p>\r\n      <h3>Aika</h3>\r\n      <p>{event.time.toLocaleString()}</p>\r\n      <h3>Kuvaus</h3>\r\n      <p>{event.description}</p>\r\n      <h3>Osallistujat</h3>\r\n      <p>{event.participants}</p>\r\n      <button onClick={handleJoinEventClick}>Osallistu</button>\r\n      <h3>Kommentit</h3>\r\n      <Comments comments={comments.filter(comment => comment.eventId === event.id)} eventId={event.id} setCommentFormEventId={setCommentFormEventId}\r\n        commentFormEventId={commentFormEventId} handleCommentSubmit={handleCommentSubmit} newAuthor={newAuthor} setNewAuthor={setNewAuthor}\r\n        newMessage={newMessage} setNewMessage={setNewMessage} handleDeleteCommentClick={handleDeleteCommentClick} />\r\n    </td>\r\n  )\r\n\r\nexport default EventTable","/**\r\n * EventForm module. Uusi tapahtuma lomake.\r\n * @module components/EventForm\r\n * @type {JSX.Element}\r\n */\r\n\r\nimport React from 'react'\r\n\r\n/**\r\n * Uuden tapahtuman lomake komponetti.\r\n * @param {function} handleEventSubmit - Lomakkeen lähetyksen tapahtuman käsittelijä.\r\n * @param {string} newName - Tapahtuma lomakkeessa oleva nimi.\r\n * @param {function} setNewName - Tapahtuman nimen asettaja.\r\n * @param {string} newLocation - Tapahtuma lomakkeessa oleva paikka.\r\n * @param {function} setNewLocation - Tapahtuman paikkan asettaja.\r\n * @param {string} newTime - Tapahtuma lomakkeessa oleva aika.\r\n * @param {function} setNewTime - Tapahtuman ajan asettaja.\r\n * @param {string} newDescription - Tapahtuma lomakkeessa oleva kuvaus.\r\n * @param {function} setNewDescription - Tapahtuman kuvauksen asettaja.\r\n * @returns {JSX.Element} Uusi tapahtuma lomake komponentti.\r\n */\r\nconst EventForm = ({ handleEventSubmit, newName, setNewName, newLocation, setNewLocation, newTime, setNewTime, newDescription, setNewDescription }) => (\r\n  <form onSubmit={handleEventSubmit} className='event-form'>\r\n    <fieldset>\r\n      <legend>Uusi tapahtuma</legend>\r\n      <label>\r\n        Tapahtuman nimi:\r\n          <input value={newName} onChange={event => setNewName(event.target.value)} />\r\n      </label>\r\n      <label>\r\n        Paikka:\r\n          <input value={newLocation} onChange={event => setNewLocation(event.target.value)} />\r\n      </label>\r\n      <label>\r\n        Aika:\r\n          <input type=\"datetime-local\" value={newTime} onChange={event => setNewTime(event.target.value)} />\r\n      </label>\r\n      <label>\r\n        Kuvaus:<br />\r\n        <textarea value={newDescription} onChange={event => setNewDescription(event.target.value)} /><br />\r\n      </label>\r\n      <button type='submit'>Lähetä</button>\r\n    </fieldset>\r\n  </form>\r\n)\r\n\r\n\r\nexport default EventForm","/**\r\n * Web-sovellus ilmoitustaulu front-end module.\r\n * @module App\r\n * @type {object}\r\n * @version 1.0.0\r\n * @author mika\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport eventService from './services/events'\r\nimport commentService from './services/comments'\r\nimport EventTable from  './components/EventTable'\r\nimport EventForm from './components/EventForm'\r\n\r\n/**\r\n * Komponetti virheilmoitukselle. \r\n * @param {string} message - Näytettävä virheviesti.\r\n * @param {function(string)} setErrorMessage - Muuttaa virheviestin.\r\n * @returns {object} Virheilmoitus komponetti.\r\n */\r\nconst ErrorNotification = ({ message, setErrorMessage }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className='error-notification'>\r\n      {message}\r\n      <button onClick={() => setErrorMessage(null)}>Sulje</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Komponetti tapahtumien tapahtumisen ilmoittamiseksi.\r\n * @param {string} message - Näytettävä viesti.\r\n * @param {function(string)} setSuccessMessage - Muuttaa viestin.\r\n * @returns {object} Ilmoitus komponentti.\r\n */\r\nconst SuccessNotification = ({ message, setSuccessMessage }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className='success-notification'>\r\n      {message}\r\n      <button onClick={() => setSuccessMessage(null)}>Sulje</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * ilmoitustaulu app\r\n * @returns {object} ilmoitustaulu komponentti\r\n */\r\nfunction App() {\r\n  /**\r\n   * @type {[string, function(string)]} - Tapahtuman nimi ja sen muuttaja.\r\n   */\r\n  const [newName, setNewName] = useState('')\r\n  /**\r\n   * @type {[string, function(string)]} - Tapahtuman paikka ja sen muuttaja.\r\n   */\r\n  const [newLocation, setNewLocation] = useState('')\r\n  /**\r\n   * @type {[string, function(string)]} - Tapahtuman aika ja sen muuttaja.\r\n   */\r\n  const [newTime, setNewTime] = useState('')\r\n  /**\r\n   * @type {[string, function(string)]} - Tapahtuman kuvaus ja sen muuttaja.\r\n   */\r\n  const [newDescription, setNewDescription] = useState('')\r\n  /**\r\n   * @type {[string, function(string)]} - Kommentin kirjoittaja ja sen muuttaja\r\n   */\r\n  const [newAuthor, setNewAuthor] = useState('')\r\n  /**\r\n  *@type {[string, function(string)]} - Kommentin viesti ja sen muuttaja.\r\n  */\r\n  const [newMessage, setNewMessage] = useState('')\r\n  /**\r\n   * @type {[string, function(string)]} - Kommentoitavan tapahtuman id ja sen muuttaja.\r\n   */\r\n  const [commentFormEventId, setCommentFormEventId] = useState('')\r\n  /**\r\n   * @type {[string[], function(string[])]} - Tapahtumien id:t, joista näytetään lisätiedot ja sen muuttaja.\r\n   */\r\n  const [eventsToShowDetails, setEventsToShowDetails] = useState([])\r\n  /**\r\n   * @type {[object[], function(object[])]} - Tapahtumi kuvaavat oliot ja niiden muuttaja.\r\n   */\r\n  const [events, setEvents] = useState([])\r\n  /**\r\n   * @type {[object[], function(object[])]} - Kommentteja kuvaavat oliot ja niiden muuttaja.\r\n   */\r\n  const [comments, setComments] = useState([])\r\n  /**\r\n   * @type {[(string|null), function(string|null)]} - Virheilmoitus viesti ja sen muuttaja \r\n   */\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  /**\r\n   * @type {[(string|null), function(string|null)]} - Ilmoitus viesti ja sen muuttaja \r\n   */\r\n  const [successMessage, setSuccessMessage] = useState(null)\r\n\r\n\r\n  useEffect(() => {\r\n    eventService.getAll()\r\n      .then(data => setEvents(data))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setNewAuthor('')\r\n    setNewMessage('')\r\n  }, [commentFormEventId])\r\n\r\n  /**\r\n   * Näyttää tapahtuman lisätiedot ja hakee sen kommentit.\r\n   * @param {string} idShow - Tapahtuman jonka lisätiedot näytetään id.\r\n   */\r\n  const handleShowEventClick = (idShow) => {\r\n    if (eventsToShowDetails.includes(idShow)) {\r\n      setEventsToShowDetails(eventsToShowDetails.filter(id => id !== idShow))\r\n    } else {\r\n      setEventsToShowDetails(eventsToShowDetails.concat(idShow))\r\n      if (!comments.some(comment => comment.eventId === idShow)) {\r\n        commentService\r\n          .getAll(idShow)\r\n          .then(data => {\r\n            setComments(comments.concat(data))\r\n          })\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Lisää tapahtumalle osallistujan. Ilmoittaa onnistumisesta tai epäonnistumisesta.\r\n   * Jos tapahtuma oli jo poistettu, päivittää näkymän vastaamaan sitä.\r\n   * @param {string} idJoin - Tapahtuman johon lisätään osallistuja id.\r\n   */\r\n  const handleJoinEventClick = (idJoin) => {\r\n    const participants = events.find(event => event.id === idJoin).participants\r\n    eventService\r\n      .update(idJoin, { participants: participants + 1 })\r\n      .then(data => {\r\n        setEvents(events.map(event => event.id !== data.id ? event : data))\r\n        setSuccessMessage(`Osallistuit tapahtumaan \"${data.name}\".`)\r\n        window.setTimeout(() => setSuccessMessage(null), 5000)\r\n      })\r\n      .catch(error => {\r\n        console.log(error.response.data.error)\r\n        if (error.response.status === 404) {\r\n          setErrorMessage(`Tapahtuma ${events.find(event => event.id === idJoin).name} oli poistettu palvelimelta`)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n          setEvents(events.filter(event => event.id !== idJoin))\r\n        } else {\r\n          setErrorMessage(error.response.data.error)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n        }\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Lisää tapahtuman lomakkeen tiedoista. Ilmoittaa lomakkeen puutteista.\r\n   * Ilmoittaa onnistumisesta tai epäonnistumisesta.\r\n   * @param {object} event - Form onSubmit Event.\r\n   */\r\n  const handleEventSubmit = (event) => {\r\n    event.preventDefault()\r\n    const newEvent = {\r\n      name: newName,\r\n      location: newLocation,\r\n      time: new Date(newTime),\r\n      description: newDescription,\r\n    }\r\n    eventService\r\n      .create(newEvent)\r\n      .then(data => {\r\n        setEvents(events.concat(data))\r\n        setNewName('')\r\n        setNewLocation('')\r\n        setNewTime('')\r\n        setNewDescription('')\r\n        setSuccessMessage(`Tapahtuma ${data.name} luotu.`)\r\n        window.setTimeout(() => setSuccessMessage(null), 5000)\r\n      })\r\n      .catch(error => {\r\n        console.log(error.response.data.error)\r\n        if (error.response.status === 400) {\r\n          setErrorMessage(`Täytä uuden tapahtuman kentät`)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n        } else {\r\n          setErrorMessage(error.response.data.error)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n        }\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Poistaa tapahtuman.\r\n   * @param {string} idDelete - Poistettavan tapahtuman id\r\n   */\r\n  const handleDeleteEventClick = (idDelete) => {\r\n    eventService\r\n      .erase(idDelete)\r\n      .then(() => {\r\n        setSuccessMessage(`Tapahtuma ${events.find(event => event.id === idDelete).name} poistettu.`)\r\n        window.setTimeout(() => setSuccessMessage(null), 5000)\r\n        setEvents(events.filter(event => event.id !== idDelete))\r\n        setEventsToShowDetails(eventsToShowDetails.filter(id => id !== idDelete))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(error.response.data.error)\r\n        window.setTimeout(() => setErrorMessage(null), 5000)\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Lisää tapahtumalle kommentin kommenttilomakkeen tiedoista. Ilmoittaa lomakkeen puutteista. \r\n   * Ilmoittaa onnistumisesta tai epäonnistumisesta. Jos tapahtuma oli jo poistettu, päivittää näkymän vastaamaan sitä.\r\n   * @param {object} event Form onSubmit Event.\r\n   */\r\n  const handleCommentSubmit = (event) => {\r\n    event.preventDefault()\r\n    const newComment = {\r\n      author: newAuthor,\r\n      message: newMessage\r\n    }\r\n    commentService\r\n      .create(commentFormEventId, newComment)\r\n      .then(SaveComment => {\r\n        setComments(comments.concat(SaveComment))\r\n        setNewAuthor('')\r\n        setNewMessage('')\r\n      })\r\n      .catch(error => {\r\n        console.log(error.response.data.error)\r\n        if (error.response.status === 404) {\r\n          setErrorMessage(`Tapahtuma ${events.find(event => event.id === commentFormEventId).name} oli poistettu palvelimelta.`)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n          setEvents(events.filter(event => event.id !== commentFormEventId))\r\n        } else if (error.response.status === 400) {\r\n          setErrorMessage(`Täytä uuden kommentin kentät`)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n        } else {\r\n          setErrorMessage(error.response.data.error)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n        }\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Poistaa kommentin. Jos tapahtuma oli jo poistettu, päivittää näkymän vastaamaan sitä.\r\n   * @param {string} eventId - Poistettavan kommentin tapahtuman id.\r\n   * @param {string} commentId - Poistettavan kommentin id.\r\n   */\r\n  const handleDeleteCommentClick = (eventId, commentId) => {\r\n    commentService.erase(eventId, commentId)\r\n      .then(() => setComments(comments.filter(comment => comment.id !== commentId)))\r\n      .catch(error => {\r\n        console.log(error.response.data.error)\r\n        if (error.response.status === 404) {\r\n          setErrorMessage(`Tapahtuma ${events.find(event => event.id === eventId).name} oli poistettu palvelimelta.`)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n          setEvents(events.filter(event => event.id !== eventId))\r\n        } else {\r\n          setErrorMessage(error.response.data.error)\r\n          window.setTimeout(() => setErrorMessage(null), 5000)\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='notification'>\r\n        <ErrorNotification message={errorMessage} setErrorMessage={setErrorMessage} />\r\n        <SuccessNotification message={successMessage} setSuccessMessage={setSuccessMessage} />\r\n      </div>\r\n      <h1>Ilmoitustaulu</h1>\r\n      <EventTable events={events} comments={comments} handleShowEventClick={handleShowEventClick} handleJoinEventClick={handleJoinEventClick}\r\n        handleDeleteEventClick={handleDeleteEventClick} eventsToShowDetails={eventsToShowDetails} setEventsToShowDetails={setEventsToShowDetails}\r\n        setCommentFormEventId={setCommentFormEventId} commentFormEventId={commentFormEventId} handleCommentSubmit={handleCommentSubmit} \r\n        newAuthor={newAuthor} setNewAuthor={setNewAuthor} newMessage={newMessage} setNewMessage={setNewMessage} handleDeleteCommentClick={handleDeleteCommentClick} />\r\n      <EventForm handleEventSubmit={handleEventSubmit} newName={newName} setNewName={setNewName} newLocation={newLocation} setNewLocation={setNewLocation}\r\n        newTime={newTime} setNewTime={setNewTime} newDescription={newDescription} setNewDescription={setNewDescription} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}